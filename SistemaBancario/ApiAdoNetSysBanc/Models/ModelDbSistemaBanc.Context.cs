//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApiAdoNetSysBanc.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SistemaBancarioEntities : DbContext
    {
        public SistemaBancarioEntities()
            : base("name=SistemaBancarioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cliente> clientes { get; set; }
        public virtual DbSet<cuenta> cuentas { get; set; }
        public virtual DbSet<tipo_identificacion> tipo_identificacion { get; set; }
        public virtual DbSet<tipo_transaccion> tipo_transaccion { get; set; }
        public virtual DbSet<transaccion> transaccions { get; set; }
        public virtual DbSet<usuario> usuarios { get; set; }
    
        public virtual ObjectResult<consultar_cuentas_cliente_Result> consultar_cuentas_cliente(Nullable<int> id_cliente)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultar_cuentas_cliente_Result>("consultar_cuentas_cliente", id_clienteParameter);
        }
    
        public virtual ObjectResult<consultar_movimientos_cuenta_Result> consultar_movimientos_cuenta(Nullable<int> id_cuenta)
        {
            var id_cuentaParameter = id_cuenta.HasValue ?
                new ObjectParameter("id_cuenta", id_cuenta) :
                new ObjectParameter("id_cuenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultar_movimientos_cuenta_Result>("consultar_movimientos_cuenta", id_cuentaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> consultar_saldo_cuenta(Nullable<int> id_cuenta)
        {
            var id_cuentaParameter = id_cuenta.HasValue ?
                new ObjectParameter("id_cuenta", id_cuenta) :
                new ObjectParameter("id_cuenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("consultar_saldo_cuenta", id_cuentaParameter);
        }
    
        public virtual int realizarTransaccion(Nullable<int> id_cuenta, Nullable<int> monto, Nullable<int> tipoTransacion, Nullable<int> idCuentaDestino)
        {
            var id_cuentaParameter = id_cuenta.HasValue ?
                new ObjectParameter("id_cuenta", id_cuenta) :
                new ObjectParameter("id_cuenta", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("monto", monto) :
                new ObjectParameter("monto", typeof(int));
    
            var tipoTransacionParameter = tipoTransacion.HasValue ?
                new ObjectParameter("tipoTransacion", tipoTransacion) :
                new ObjectParameter("tipoTransacion", typeof(int));
    
            var idCuentaDestinoParameter = idCuentaDestino.HasValue ?
                new ObjectParameter("idCuentaDestino", idCuentaDestino) :
                new ObjectParameter("idCuentaDestino", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("realizarTransaccion", id_cuentaParameter, montoParameter, tipoTransacionParameter, idCuentaDestinoParameter);
        }
    }
}
